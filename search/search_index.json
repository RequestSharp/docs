{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation You can build from source at the github repo Or using the nuget package manger Quick Start Introduction RequestSharp is a simple http client library made for humans Fully inspired by the python requests module Built using the HttpClient from .NET The main namespaces The main namespace that contains the Session object that you will be sending Requests using using RequestSharp . session ; The namespace that contains the CookieJar object to control and handle Request cookies using RequestSharp . cookies ; The namespace that contains the Response object that comes from each Request using RequestSharp . response ; The namespace that contains the default params (not needed) using RequestSharp . defaultParms ; The namespace that contains the Proxy object using RequestSharp . proxy ; Making your first GET request // The main classes // Lets start by initializing our session class Session s = new Session(); // Now lets send a super simple reuqest to https://httpbin.org/get site to extract the json data Response response = s.Get(\"https://httpbin.org/get\"); // Now this will return the Response class from Requests.response namespace // Now lets start by printing the content of the page Console.WriteLine(response.text); // Yes easy as that // You can also use JObject json = response.textInJson(); Console.WriteLine(json[\"origin\"]) // Will print a ip address // To get the json object so you can index it easily Making your first POST request // Lets start by initializing our session class Session s = new Session(); // Now lets send a super simple reuqest to send some data to https://httpbin.org/post // First of all we need to make the Dictionary that will contain our data Dictionary<string,string> payload = new Dictionary<string,string>(){ {\"key\",\"value\"} } // Now we are ready to send the data Response response = s.Post(\"https://httpbin.org/post\",data:payload); // This will return the Response object Passing Parameters In URLs // The parameters is a Dictionary with strings key and value Dictionary<string, string> paramters = new Dictionary<string, string>() { {\"q\",\"RequestSharp\"} }; // As a example we will be sending a GET request to the github repo api to search Repo with that name Response r = s.Get(\"https://api.github.com/search/repositories\",parameters:params); Console.WriteLine(r.url); // https://api.github.com/search/repositories?q=RequestSharp You can also pass a Dictionary with string and List Dictionary<string,List<string>> As example Dictionary<string, object> parameters = new Dictionary<string, object>() { {\"key1\", \"value1\"}, {\"key2\", new List<string>{\"value2\", \"value3\"}} }; <hr> Response content Response r = s.Get(url/* Other parameters*/); Console.WriteLine(r.text); // The response text from the server Lets say it was json and you want to index it string url = \"https://httpbin.org/ip\"; Response r = s.Get(url); JObject json = r.textInJson(); // This will return a json object that can be indexed easily Console.WriteLine(json[\"origin\"]); The text encoding In a feature release you will be able to get the Response text based on the encoding Response r = s.Get(\"https://api.github.com/search/repositories?q=RequestSharp\") Console.WriteLine(r.encoding) // utf-8 IMPORTANT NOTE ABOUT ENCODING : if the encoding wasnot sent in the headers encoding will be a null or empty string ANOTHER NOTE: apparent encoding is not supported for now Binary Response Content You can get the binary using byte[] BytesArray = r.content; // thebinarycontent As a example you can safe a image using Response r = s.Get(\"https://avatars.githubusercontent.com/u/123822233?v=4\"); string path = @\"Path\\to\\save.jpeg\" System.IO.File.WriteAllBytes(path, r.content); Custom Headers To add headers to the request by making a Dictionary with <string,string> Dictionary<string,string> headers = new Dictionary<string,string>(){ {\"user-agent\",\"cs-requests/0.1\"} }; // BTW thats the default user-agent in RequestSharp Response r = s.Get(\"https://httpbin.org/headers\",headers:headers); Console.WriteLine(r.text); //Headers the server sent back /* { \"headers\": { \"Host\": \"httpbin.org\", \"User-Agent\": \"cs-requests/0.1\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id VALUE\" } } */ More Complicated POST requests What about sending multiple values with the same key Sadly C# doesnot support duplicate keys directly in a Dictionary so we will be doing it in another way using Dictionary with strings as keys and Lists as the values As a example // List contains values List<string> values = new List<string>{\"value1\",\"value2\"}; // The list that contains the payload will be sent in the POST request Dictionary<string,List<string>> payload = new Dictionary<string,List<string>>{ {\"key1\",new List<string>{\"value1\",\"value2\"}} {\"key2\",values} Response r = s.PostList(\"https://httpbin.org/post\",data:payload); } ; Console.WriteLine(r.text); /* { ... \"form\": { \"key1\": [ \"value1\", \"value2\" ] },{ \"key2\":[ \"value1\", \"value2\" ] } ... } */ Uploading files You can simply upload files using paths only To upload you need to make a List with the paths NOTE: You can send data with the files normally List<string> files = new List<string>{ \"Path/To/The/firstfile.ext\", \"Path/To/The/secondfile.ext\" } Response r = s.Post(\"https://httpbin.org/post\",files:files) Optionally you can include the file names in a diffrent List List<string> filesnames = new List<string>{ \"FileName1.ext\", \"FileName2.ext\" } List<string> files = new List<string>{ \"Path/To/The/firstfile.ext\", \"Path/To/The/secondfile.ext\" } Response r = s.Post(\"https://httpbin.org/post\",files:files,filesnames:filesnames) Response Status Codes We can get the response status code using: Response r = s.Get(\"https://httpbin.org/get\"); Console.WriteLine(r.status_code); // 200 If we made a bad request (a 4XX client error or 5XX server error response), we can raise it with Response.RaiseForStatus(): Response r = s.Get(\"https://httpbin.org/status/404\"); r.RaiseForStatus(); // Unhandled exception. System.Net.Http.HttpRequestException: 404 Client Error: Reason: NOT FOUND OR Response r = s.Get(\"https://httpbin.org/status/500\"); r.RaiseForStatus(); // Unhandled exception. System.Net.Http.HttpRequestException: 500 Server Error: Reason: INTERNAL SERVER ERROR Response Headers We can view the server\u2019s response headers by iterating through the Dictionary: Response r = s.Get(\"https://httpbin.org/headers\") foreach(var head in headers){ Console.WriteLine($\"{head.Key},{head.Value}\") } You can index it as json using JObject jsonHeaders = r.headersInJson(); Console.WriteLine(jsonHeaders[\"user-agent\"]); // cs-requests/0.1 Cookies If the response headers contains cookies you can access them easily by: Response r = s.Get(\"https://examplesite.com/get/cookies\"); // The CookieJar exists in RequestSharp.cookies CookieJar cookies = r.cookies; // We can loop them using foreach(Cookie cookie in cookies.GetAll()){ Console.WriteLine($\"{cookie.Name}:{cookie.Value}:{cookie.Domain} Etc...\"); } // Or get only one by its name Cookie cookie = cookies.Get(\"name\") Or we can access the json string using: Console.WriteLine(cookies.GetCookiesJson()); To send your own cookies CookieJar jar = new CookieJar() // To can add a cookie using two ways // First jar.Add(\"name\",\"value\",\"domain.com\",/*PATH*/\"/\" /*OTHER PARAMS*/); // Second Cookie cookie = new Cookie(\"name\",\"value\",\"domain.com\",/*PATH*/\"/\" /*OTHER PARAMS*/); jar.Add(cookie) // Usefull in some cases when you want to get a cookie from a site and add it to another AS A EXAMPLE CookieJar cookies = r.cookies; CookieJar cookiesToSend = new CookieJar(); cookiesToSend.Add(cookies.Get(\"name\").setDomain(\"target.com\")) Response r = s.Get(\"https://target.com\",cookies:cookiesToSend); // Cool right? Allowing redirects You can allow redirects using: bool allowRedirects = false; Response r = s.Get(\"https://httpbin.org/redirect-to?url=https%3A%2F%2Fgoogle.com&status_code=302\",allow_redirects:allowRedirects); Console.WriteLine(r.status_code); // 302 Console.WriteLine(r.is_redirect) // true Important note: If allow_redirects was true the status_code will be 200 and is_redirect will be false We are done for now Want more? advanced","title":"Home"},{"location":"#installation","text":"","title":"Installation"},{"location":"#you-can-build-from-source-at-the-github-repo","text":"","title":"You can build from source at the github repo"},{"location":"#or-using-the-nuget-package-manger","text":"","title":"Or using the nuget package manger"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#requestsharp-is-a-simple-http-client-library-made-for-humans","text":"","title":"RequestSharp is a simple http  client library made for humans"},{"location":"#fully-inspired-by-the-python-requests-module","text":"","title":"Fully inspired by the python requests module"},{"location":"#built-using-the-httpclient-from-net","text":"","title":"Built using the HttpClient from .NET"},{"location":"#the-main-namespaces","text":"","title":"The main namespaces"},{"location":"#making-your-first-get-request","text":"// The main classes // Lets start by initializing our session class Session s = new Session(); // Now lets send a super simple reuqest to https://httpbin.org/get site to extract the json data Response response = s.Get(\"https://httpbin.org/get\"); // Now this will return the Response class from Requests.response namespace // Now lets start by printing the content of the page Console.WriteLine(response.text); // Yes easy as that // You can also use JObject json = response.textInJson(); Console.WriteLine(json[\"origin\"]) // Will print a ip address // To get the json object so you can index it easily","title":"Making your first GET request"},{"location":"#making-your-first-post-request","text":"// Lets start by initializing our session class Session s = new Session(); // Now lets send a super simple reuqest to send some data to https://httpbin.org/post // First of all we need to make the Dictionary that will contain our data Dictionary<string,string> payload = new Dictionary<string,string>(){ {\"key\",\"value\"} } // Now we are ready to send the data Response response = s.Post(\"https://httpbin.org/post\",data:payload); // This will return the Response object","title":"Making your first POST request"},{"location":"#passing-parameters-in-urls","text":"// The parameters is a Dictionary with strings key and value Dictionary<string, string> paramters = new Dictionary<string, string>() { {\"q\",\"RequestSharp\"} }; // As a example we will be sending a GET request to the github repo api to search Repo with that name Response r = s.Get(\"https://api.github.com/search/repositories\",parameters:params); Console.WriteLine(r.url); // https://api.github.com/search/repositories?q=RequestSharp","title":"Passing Parameters In URLs"},{"location":"#you-can-also-pass-a-dictionary-with-string-and-list","text":"Dictionary<string,List<string>>","title":"You can also pass a Dictionary with string and List"},{"location":"#as-example","text":"Dictionary<string, object> parameters = new Dictionary<string, object>() { {\"key1\", \"value1\"}, {\"key2\", new List<string>{\"value2\", \"value3\"}} }; <hr>","title":"As example"},{"location":"#response-content","text":"Response r = s.Get(url/* Other parameters*/); Console.WriteLine(r.text); // The response text from the server","title":"Response content"},{"location":"#lets-say-it-was-json-and-you-want-to-index-it","text":"string url = \"https://httpbin.org/ip\"; Response r = s.Get(url); JObject json = r.textInJson(); // This will return a json object that can be indexed easily Console.WriteLine(json[\"origin\"]);","title":"Lets say it was json and you want to index it"},{"location":"#the-text-encoding","text":"","title":"The text encoding"},{"location":"#in-a-feature-release-you-will-be-able-to-get-the-response-text-based-on-the-encoding","text":"Response r = s.Get(\"https://api.github.com/search/repositories?q=RequestSharp\") Console.WriteLine(r.encoding) // utf-8 IMPORTANT NOTE ABOUT ENCODING : if the encoding wasnot sent in the headers encoding will be a null or empty string ANOTHER NOTE: apparent encoding is not supported for now","title":"In a feature release you will be able to get the Response text based on the encoding"},{"location":"#binary-response-content","text":"","title":"Binary Response Content"},{"location":"#you-can-get-the-binary-using","text":"byte[] BytesArray = r.content; // thebinarycontent","title":"You can get the binary using"},{"location":"#as-a-example-you-can-safe-a-image-using","text":"Response r = s.Get(\"https://avatars.githubusercontent.com/u/123822233?v=4\"); string path = @\"Path\\to\\save.jpeg\" System.IO.File.WriteAllBytes(path, r.content);","title":"As a example you can safe a image using"},{"location":"#custom-headers","text":"","title":"Custom Headers"},{"location":"#to-add-headers-to-the-request-by-making-a-dictionary-with-stringstring","text":"Dictionary<string,string> headers = new Dictionary<string,string>(){ {\"user-agent\",\"cs-requests/0.1\"} }; // BTW thats the default user-agent in RequestSharp Response r = s.Get(\"https://httpbin.org/headers\",headers:headers); Console.WriteLine(r.text); //Headers the server sent back /* { \"headers\": { \"Host\": \"httpbin.org\", \"User-Agent\": \"cs-requests/0.1\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id VALUE\" } } */","title":"To add headers to the request by making a Dictionary with &lt;string,string&gt;"},{"location":"#more-complicated-post-requests","text":"","title":"More Complicated POST requests"},{"location":"#what-about-sending-multiple-values-with-the-same-key","text":"","title":"What about sending multiple values with the same key"},{"location":"#sadly-c-doesnot-support-duplicate-keys-directly-in-a-dictionary-so-we-will-be-doing-it-in-another-way-using","text":"","title":"Sadly C# doesnot support duplicate keys directly in a Dictionary so we will be doing it in another way using"},{"location":"#dictionary-with-strings-as-keys-and-lists-as-the-values","text":"","title":"Dictionary with strings as keys and Lists as the values"},{"location":"#as-a-example","text":"// List contains values List<string> values = new List<string>{\"value1\",\"value2\"}; // The list that contains the payload will be sent in the POST request Dictionary<string,List<string>> payload = new Dictionary<string,List<string>>{ {\"key1\",new List<string>{\"value1\",\"value2\"}} {\"key2\",values} Response r = s.PostList(\"https://httpbin.org/post\",data:payload); } ; Console.WriteLine(r.text); /* { ... \"form\": { \"key1\": [ \"value1\", \"value2\" ] },{ \"key2\":[ \"value1\", \"value2\" ] } ... } */","title":"As a example"},{"location":"#uploading-files","text":"","title":"Uploading files"},{"location":"#you-can-simply-upload-files-using-paths-only","text":"","title":"You can simply upload files using paths only"},{"location":"#to-upload-you-need-to-make-a-list-with-the-paths-note-you-can-send-data-with-the-files-normally","text":"List<string> files = new List<string>{ \"Path/To/The/firstfile.ext\", \"Path/To/The/secondfile.ext\" } Response r = s.Post(\"https://httpbin.org/post\",files:files)","title":"To upload you need to make a List with the paths NOTE: You can send data with the files normally"},{"location":"#optionally-you-can-include-the-file-names-in-a-diffrent-list","text":"List<string> filesnames = new List<string>{ \"FileName1.ext\", \"FileName2.ext\" } List<string> files = new List<string>{ \"Path/To/The/firstfile.ext\", \"Path/To/The/secondfile.ext\" } Response r = s.Post(\"https://httpbin.org/post\",files:files,filesnames:filesnames)","title":"Optionally you can include the file names in a diffrent List"},{"location":"#response-status-codes","text":"","title":"Response Status Codes"},{"location":"#we-can-get-the-response-status-code-using","text":"Response r = s.Get(\"https://httpbin.org/get\"); Console.WriteLine(r.status_code); // 200","title":"We can get the response status code using:"},{"location":"#if-we-made-a-bad-request-a-4xx-client-error-or-5xx-server-error-response-we-can-raise-it-with-responseraiseforstatus","text":"Response r = s.Get(\"https://httpbin.org/status/404\"); r.RaiseForStatus(); // Unhandled exception. System.Net.Http.HttpRequestException: 404 Client Error: Reason: NOT FOUND","title":"If we made a bad request (a 4XX client error or 5XX server error response), we can raise it with Response.RaiseForStatus():"},{"location":"#or","text":"Response r = s.Get(\"https://httpbin.org/status/500\"); r.RaiseForStatus(); // Unhandled exception. System.Net.Http.HttpRequestException: 500 Server Error: Reason: INTERNAL SERVER ERROR","title":"OR"},{"location":"#response-headers","text":"","title":"Response Headers"},{"location":"#we-can-view-the-servers-response-headers-by-iterating-through-the-dictionary","text":"Response r = s.Get(\"https://httpbin.org/headers\") foreach(var head in headers){ Console.WriteLine($\"{head.Key},{head.Value}\") }","title":"We can view the server\u2019s response headers by iterating through the Dictionary:"},{"location":"#you-can-index-it-as-json-using","text":"JObject jsonHeaders = r.headersInJson(); Console.WriteLine(jsonHeaders[\"user-agent\"]); // cs-requests/0.1","title":"You can index it as json using"},{"location":"#cookies","text":"","title":"Cookies"},{"location":"#if-the-response-headers-contains-cookies-you-can-access-them-easily-by","text":"Response r = s.Get(\"https://examplesite.com/get/cookies\"); // The CookieJar exists in RequestSharp.cookies CookieJar cookies = r.cookies; // We can loop them using foreach(Cookie cookie in cookies.GetAll()){ Console.WriteLine($\"{cookie.Name}:{cookie.Value}:{cookie.Domain} Etc...\"); } // Or get only one by its name Cookie cookie = cookies.Get(\"name\")","title":"If the response headers contains cookies you can access them easily by:"},{"location":"#or-we-can-access-the-json-string-using","text":"Console.WriteLine(cookies.GetCookiesJson());","title":"Or we can access the json string using:"},{"location":"#to-send-your-own-cookies","text":"CookieJar jar = new CookieJar() // To can add a cookie using two ways // First jar.Add(\"name\",\"value\",\"domain.com\",/*PATH*/\"/\" /*OTHER PARAMS*/); // Second Cookie cookie = new Cookie(\"name\",\"value\",\"domain.com\",/*PATH*/\"/\" /*OTHER PARAMS*/); jar.Add(cookie) // Usefull in some cases when you want to get a cookie from a site and add it to another AS A EXAMPLE CookieJar cookies = r.cookies; CookieJar cookiesToSend = new CookieJar(); cookiesToSend.Add(cookies.Get(\"name\").setDomain(\"target.com\")) Response r = s.Get(\"https://target.com\",cookies:cookiesToSend); // Cool right?","title":"To send your own cookies"},{"location":"#allowing-redirects","text":"","title":"Allowing redirects"},{"location":"#you-can-allow-redirects-using","text":"bool allowRedirects = false; Response r = s.Get(\"https://httpbin.org/redirect-to?url=https%3A%2F%2Fgoogle.com&status_code=302\",allow_redirects:allowRedirects); Console.WriteLine(r.status_code); // 302 Console.WriteLine(r.is_redirect) // true","title":"You can allow redirects using:"},{"location":"#important-note-if-allow_redirects-was-true-the-status_code-will-be-200-and-is_redirect-will-be-false","text":"","title":"Important note: If allow_redirects was true the status_code will be 200 and is_redirect will be false"},{"location":"#we-are-done-for-now","text":"","title":"We are done for now"},{"location":"#want-more-advanced","text":"","title":"Want more? advanced"},{"location":"Advanced/","text":"In depth with Session object The Session object exists for a reason ofc not to only just make the requests but also to persists some data Lets say there is a website that you will be logging into and you want to keep on being logged in and to request it again as the signed user Here comes the use of Session Heres a example how something like that could be implemented Session s = new Session(/*you can specify some parameters here like headers and cookies and others*/) // The payload Dictionary Dictionary<string,string> payload = new Dictionary<string,string>{ {\"email\",\"exampleEmail@ex.co\"}, {\"password\",\"secret123\"} }; Response r = s.Post(\"https://example/login/post\",data:payload); // Now lets persist the cookies was sent from the server s.cookies = r.cookies; // Yes easy as that // Lets say you want to add more s.cookies = s.cookies.Add(/*params here*/); // Okay done perfect // Now you do not want those cookies to be used any more // Simply s.ClearCookies(); So what about the headers? You can persists them too using Session s = new Session(/*you can specify some parameters here like headers and cookies and others*/); // To set the headers s.headers = yourDict; // This will override the default headers Response r = s.Get(\"https://example.com\"); But here comes a important note : When you specify the headers in the Session and in the request it sends both of them So as a example Dictionary<string, string> headers = new Dictionary<string, string>(){ {\"headOne\",\"valueOne\"} }; s.headers = headers; Response r = s.Get(\"https://httpbin.org/headers\"); Console.WriteLine(r.text); /* { \"headers\": { \"Headone\": \"valueOne\", \"Host\": \"httpbin.org\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id Value\" } } */ Dictionary<string, string> headers2 = new Dictionary<string, string>(){ {\"headTwi\",\"valueTwo\"} }; Response r2 = s.Get(\"https://httpbin.org/headers\",headers:headers2); Console.WriteLine(r.text); // Will result to /* { \"headers\": { \"Headone\": \"valueOne\", \"Headtwo\": \"valueTwo\", \"Host\": \"httpbin.org\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id Value\" } } */ So if you donot need that simply use s.ClearHeaders(); // This will clear the headers given and stick wit the default Defaultparms.headers; If you want to clear all of them simply use s.ClearAllHeaders(); // This will set the header to a empty Dictionary To prevent resource allocation use the garbage collector as a example Response r = s.Get(\"http://example.com/largecontent\").text; // Now the r will contain a very large amount in data held in memory as example // You got a program makes alot of requests and they are needed only one time // It will occupy the memory for no reason so to fix that you can do the following r = null; GC.Collect(); // Not reccommended for small requests Streaming Requests Using the Response.IterContent() Will keep on yielding enumerable bytes array As a example Response r = s.Get(\"https://example.com/verylargefile\",stream:true,/*OTHER PARAMS*/); Encoding encoding = Encoding.GetEncoding(\"utf-8\"); // You can also use r.encoding NOTE: sometimes its null foreach(byte[] bytes in r.IterContent()){ Console.Write(encoding.GetString(bytes)); } // If you want to get the encoding based on the byte array you can use Ude https://github.com/errepi/ude Example of downloading a rar file string filePath = \"path/to/save.rar\"; Response r = s.Get(\"https://example.com/test.rar\"); Console.WriteLine(r.status_code.ToString()); using (FileStream stream = new FileStream(filePath, FileMode.Create, FileAccess.Write)) // Making a filestream with the required params { foreach (byte[] item in rr1.IterContent()) { stream.Write(item, 0, item.Length); // item is the byte array 0 is the offest item.Length the array length } } Using proxies // initialize the proxy object Proxy proxy = new Proxy(\"IPADDRESS\",(int)port); // Or using IP ip = new IP(\"IP\"); PORT port = new PORT(443); Proxy proxy1 = new Proxy(ip,port); Response r = s.Get(\"https://example.com\",proxy:proxy1); Or you can persist it Session = new Session(); s.proxy = proxy1; // Set the proxy that will be used in each request Also you can build a super simple checking on ip like the following Proxy proxy = new Proxy(\"ip\",(int)port); if (proxy.isOnline(timeout:2000)){ Response r = s.Get(\"https://example.com\",proxy:proxy) } Socks proxies and merging the environment will be available in the coming update MAYBE lol Using certificates X509Certificate2 certi = new X509Certificate2(\"path/to/certi.cert\",\"PASSWORD If required\"); Response r = s.Get(\"https://example.com\",cert:certi); Or you can persist it X509Certificate2 certi = new X509Certificate2(\"path/to/certi.cert\",\"PASSWORD If required\"); Session s = new Session(cert:certi); // To update it s.cert = newCert; // Then request normally Timeouts int timeout = 9000; Response r = s.Get(\"https://example.com\",timeout:timeout); For a unlimted timeout Response r = s.Get(\"https://example.com\",timeout:-2); NOTE: the timeout is used to prevent the client from throwing a error when the server still didnot send any Else if it wasnot reachable it will still throw a error And Yes We Are Done For Now Please Donot Forget To Star The github repo","title":"Advanced"},{"location":"Advanced/#in-depth-with-session-object","text":"","title":"In depth with Session object"},{"location":"Advanced/#the-session-object-exists-for-a-reason-ofc-not-to-only-just-make-the-requests-but-also-to-persists-some-data","text":"","title":"The Session object exists for a reason ofc not to only just make the requests but also to persists some data"},{"location":"Advanced/#lets-say-there-is-a-website-that-you-will-be-logging-into-and-you-want-to-keep-on-being-logged-in-and-to-request-it-again-as-the-signed-user","text":"","title":"Lets say there is a website that you will be logging into and you want to keep on being logged in and to request it again as the signed user"},{"location":"Advanced/#here-comes-the-use-of-session","text":"","title":"Here comes the use of Session"},{"location":"Advanced/#heres-a-example-how-something-like-that-could-be-implemented","text":"Session s = new Session(/*you can specify some parameters here like headers and cookies and others*/) // The payload Dictionary Dictionary<string,string> payload = new Dictionary<string,string>{ {\"email\",\"exampleEmail@ex.co\"}, {\"password\",\"secret123\"} }; Response r = s.Post(\"https://example/login/post\",data:payload); // Now lets persist the cookies was sent from the server s.cookies = r.cookies; // Yes easy as that // Lets say you want to add more s.cookies = s.cookies.Add(/*params here*/); // Okay done perfect // Now you do not want those cookies to be used any more // Simply s.ClearCookies();","title":"Heres a example how something like that could be implemented"},{"location":"Advanced/#so-what-about-the-headers","text":"","title":"So what about the headers?"},{"location":"Advanced/#you-can-persists-them-too-using","text":"Session s = new Session(/*you can specify some parameters here like headers and cookies and others*/); // To set the headers s.headers = yourDict; // This will override the default headers Response r = s.Get(\"https://example.com\");","title":"You can persists them too using"},{"location":"Advanced/#but-here-comes-a-important-note","text":"","title":"But here comes a important note :"},{"location":"Advanced/#when-you-specify-the-headers-in-the-session-and-in-the-request-it-sends-both-of-them","text":"","title":"When you specify the headers in the Session and in the request it sends both of them"},{"location":"Advanced/#so-as-a-example","text":"Dictionary<string, string> headers = new Dictionary<string, string>(){ {\"headOne\",\"valueOne\"} }; s.headers = headers; Response r = s.Get(\"https://httpbin.org/headers\"); Console.WriteLine(r.text); /* { \"headers\": { \"Headone\": \"valueOne\", \"Host\": \"httpbin.org\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id Value\" } } */ Dictionary<string, string> headers2 = new Dictionary<string, string>(){ {\"headTwi\",\"valueTwo\"} }; Response r2 = s.Get(\"https://httpbin.org/headers\",headers:headers2); Console.WriteLine(r.text); // Will result to /* { \"headers\": { \"Headone\": \"valueOne\", \"Headtwo\": \"valueTwo\", \"Host\": \"httpbin.org\", \"X-Amzn-Trace-Id\": \"X-Amzn-Trace-Id Value\" } } */","title":"So as a example"},{"location":"Advanced/#so-if-you-donot-need-that-simply-use","text":"s.ClearHeaders(); // This will clear the headers given and stick wit the default Defaultparms.headers;","title":"So if you donot need that simply use"},{"location":"Advanced/#if-you-want-to-clear-all-of-them-simply-use","text":"s.ClearAllHeaders(); // This will set the header to a empty Dictionary","title":"If you want to clear all of them simply use"},{"location":"Advanced/#to-prevent-resource-allocation-use-the-garbage-collector-as-a-example","text":"Response r = s.Get(\"http://example.com/largecontent\").text; // Now the r will contain a very large amount in data held in memory as example // You got a program makes alot of requests and they are needed only one time // It will occupy the memory for no reason so to fix that you can do the following r = null; GC.Collect(); // Not reccommended for small requests","title":"To prevent resource allocation use the  garbage collector as a example"},{"location":"Advanced/#streaming-requests","text":"","title":"Streaming Requests"},{"location":"Advanced/#using-the-responseitercontent","text":"","title":"Using the Response.IterContent()"},{"location":"Advanced/#will-keep-on-yielding-enumerable-bytes-array","text":"","title":"Will keep on yielding enumerable bytes array"},{"location":"Advanced/#as-a-example","text":"Response r = s.Get(\"https://example.com/verylargefile\",stream:true,/*OTHER PARAMS*/); Encoding encoding = Encoding.GetEncoding(\"utf-8\"); // You can also use r.encoding NOTE: sometimes its null foreach(byte[] bytes in r.IterContent()){ Console.Write(encoding.GetString(bytes)); } // If you want to get the encoding based on the byte array you can use Ude https://github.com/errepi/ude","title":"As a example"},{"location":"Advanced/#example-of-downloading-a-rar-file","text":"string filePath = \"path/to/save.rar\"; Response r = s.Get(\"https://example.com/test.rar\"); Console.WriteLine(r.status_code.ToString()); using (FileStream stream = new FileStream(filePath, FileMode.Create, FileAccess.Write)) // Making a filestream with the required params { foreach (byte[] item in rr1.IterContent()) { stream.Write(item, 0, item.Length); // item is the byte array 0 is the offest item.Length the array length } }","title":"Example of downloading a rar file"},{"location":"Advanced/#using-proxies","text":"// initialize the proxy object Proxy proxy = new Proxy(\"IPADDRESS\",(int)port); // Or using IP ip = new IP(\"IP\"); PORT port = new PORT(443); Proxy proxy1 = new Proxy(ip,port); Response r = s.Get(\"https://example.com\",proxy:proxy1);","title":"Using proxies"},{"location":"Advanced/#or-you-can-persist-it","text":"Session = new Session(); s.proxy = proxy1; // Set the proxy that will be used in each request","title":"Or you can persist it"},{"location":"Advanced/#also-you-can-build-a-super-simple-checking-on-ip-like-the-following","text":"Proxy proxy = new Proxy(\"ip\",(int)port); if (proxy.isOnline(timeout:2000)){ Response r = s.Get(\"https://example.com\",proxy:proxy) }","title":"Also you can build a super simple checking on ip like the following"},{"location":"Advanced/#socks-proxies-and-merging-the-environment-will-be-available-in-the-coming-update-maybe-lol","text":"","title":"Socks proxies and merging the environment will be available in the coming update MAYBE lol"},{"location":"Advanced/#using-certificates","text":"X509Certificate2 certi = new X509Certificate2(\"path/to/certi.cert\",\"PASSWORD If required\"); Response r = s.Get(\"https://example.com\",cert:certi);","title":"Using certificates"},{"location":"Advanced/#or-you-can-persist-it_1","text":"X509Certificate2 certi = new X509Certificate2(\"path/to/certi.cert\",\"PASSWORD If required\"); Session s = new Session(cert:certi); // To update it s.cert = newCert; // Then request normally","title":"Or you can persist it"},{"location":"Advanced/#timeouts","text":"int timeout = 9000; Response r = s.Get(\"https://example.com\",timeout:timeout);","title":"Timeouts"},{"location":"Advanced/#for-a-unlimted-timeout","text":"Response r = s.Get(\"https://example.com\",timeout:-2);","title":"For a unlimted timeout"},{"location":"Advanced/#note-the-timeout-is-used-to-prevent-the-client-from-throwing-a-error-when-the-server-still-didnot-send-any","text":"","title":"NOTE: the timeout is used to prevent the client from throwing a error when the server still didnot send any"},{"location":"Advanced/#else-if-it-wasnot-reachable-it-will-still-throw-a-error","text":"","title":"Else if it wasnot reachable it will still throw a error"},{"location":"Advanced/#and-yes-we-are-done-for-now-please-donot-forget-to-star-the-github-repo","text":"","title":"And Yes We Are Done For Now Please Donot Forget To Star The github repo"},{"location":"Http%20Methods/","text":"RequestSharp Http Methods IMPORTANT NOTE RequestSharp is still in its early development and does not include all the HTTP methods. Currently, it only supports the main two: GET and POST. All other methods will be added in the next update soon. GET Argument Used for url The url the GET request will be sent to (string) parameters The Parameters that will be added to the url will result to ?Key=Value as a example,values can be a string List (Dictionary <string, object> ) allow_redirects if true the client will accept redirects DEFAULT : true (bool) headers The headers that will be sent with the request NOTE: if you set the headers in the session and in the argument BOTH will be sent (Dictionary <string, string> ) cookies The cookies that will be used in the request (CookieJar) cert The certificate file that the client will be using (X509Certificate2) ClientCertificateOption Specifies the certificate options that will be using NOTE: : you dont need it to use the certificate (ClientCertificateOption) proxy The proxy object that will be used to make the request (Proxy) timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) verify_ssl If false it will not verify for ssl DEFAULT : true (bool) POST Argument Used for url The url the GET request will be sent to (string) data The data that will be sent with the request (PAYLOAD) (Dictionary <string, string> ) if you need to send multiple values per key Click here parameters The Parameters that will be added to the url will result to ?Key=Value as a example, values can be a string List (Dictionary <string, object> ) filesnames The filesnames that will be used for the files list NOTE: They are not needed for uploading as if not given will extract names from files THEY BOTH NEED TO BE SAME LENGTH (List<string>) allow_redirects if true the client will accept redirects DEFAULT : true (bool) headers The headers that will be sent with the request NOTE: if you set the headers in the session and in the argument BOTH will be sent (Dictionary <string, string> ) cookies The cookies that will be used in the request (CookieJar) cert The certificate file that the client will be using (X509Certificate2) ClientCertificateOption Specifies the certificate options that will be using NOTE: : you dont need it to use the certificate (ClientCertificateOption) proxy The proxy object that will be used to make the request (Proxy) timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) verify_ssl If false it will not verify for ssl DEFAULT : true (bool)","title":"Http Methods"},{"location":"Http%20Methods/#requestsharp-http-methods","text":"","title":"RequestSharp Http Methods"},{"location":"Http%20Methods/#get","text":"Argument Used for url The url the GET request will be sent to (string) parameters The Parameters that will be added to the url will result to ?Key=Value as a example,values can be a string List (Dictionary <string, object> ) allow_redirects if true the client will accept redirects DEFAULT : true (bool) headers The headers that will be sent with the request NOTE: if you set the headers in the session and in the argument BOTH will be sent (Dictionary <string, string> ) cookies The cookies that will be used in the request (CookieJar) cert The certificate file that the client will be using (X509Certificate2) ClientCertificateOption Specifies the certificate options that will be using NOTE: : you dont need it to use the certificate (ClientCertificateOption) proxy The proxy object that will be used to make the request (Proxy) timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) verify_ssl If false it will not verify for ssl DEFAULT : true (bool)","title":"GET"},{"location":"Http%20Methods/#post","text":"Argument Used for url The url the GET request will be sent to (string) data The data that will be sent with the request (PAYLOAD) (Dictionary <string, string> ) if you need to send multiple values per key Click here parameters The Parameters that will be added to the url will result to ?Key=Value as a example, values can be a string List (Dictionary <string, object> ) filesnames The filesnames that will be used for the files list NOTE: They are not needed for uploading as if not given will extract names from files THEY BOTH NEED TO BE SAME LENGTH (List<string>) allow_redirects if true the client will accept redirects DEFAULT : true (bool) headers The headers that will be sent with the request NOTE: if you set the headers in the session and in the argument BOTH will be sent (Dictionary <string, string> ) cookies The cookies that will be used in the request (CookieJar) cert The certificate file that the client will be using (X509Certificate2) ClientCertificateOption Specifies the certificate options that will be using NOTE: : you dont need it to use the certificate (ClientCertificateOption) proxy The proxy object that will be used to make the request (Proxy) timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) verify_ssl If false it will not verify for ssl DEFAULT : true (bool)","title":"POST"},{"location":"Reference/","text":"Reference Session session is the main class to send the http requests Attribute Used for Session.headers The headers that the client will be sending in each request you can get the default from Defaultparms.headers (Dictionary<string, string>) Session.CookiesJar The Session cookies that the client will be sending in each request if specified you can initialize it using RequestSharp.cookies.CookieJar (CookieJar) Session.cert The certificate file that the client will be using you can initialize it with the X509Certificate2 class (X509Certificate2) Session.timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) Session.allowAutoRedirect if true the client will accept redirects DEFAULT : true (bool) Session.proxy The proxy that the client will be using to make requests you can initialize it using RequestSharp.proxy.Proxy takes a ip and a port (Proxy) Session.ClientCertificateOptions Specifies the certificate options that will be using you can initialize it using System.Net.Http.ClientCertificateOption NOTE: you dont need it to use the certificate (ClientCertificateOption) Session.verify_ssl If false it will not verify for ssl DEFAULT : true (bool) Session.AutomaticDecompression Decompressing the data were sent from the server (NOT IMPLEMENTED YET) Session.maxAutomaticRedirections max amount of redirections (NOT IMPLEMENTED YET) Session.maxResponseContentBufferSize The max size could the server (The website) send default -1 for unlimted (NOT IMPLEMENTED YET) Methods Method Used for Get Sends a GET request to a specifec Url arguments Post Sends a POST request to a specifec Url arguments PostList same as post but the data is Dictionary<string, List<>string> ClearCookies To clear the cookies were given to the Session ClearHeaders Will clear the headers were given to the Session BUT will stick with default ones ClearAllHeaders Will clear all the headers even the default ones CookieJar The CookieJar class represents a collection of cookies Dictionary that can be used to manage the requests cookies Cookie object attributes Attributes Cookie Attributes Attribute Used for Name The name of the cookie (Required) (string) Value The value of the cookie (Required) (string) Domain The domain to which the cookie applies to (EX. google.com) (Optional) (string) Path The path within the domain to which the cookie applies (EX. \"/\") (Optional) (string) Expires The date and time at which the cookie expires (Optional) (string) Secure A flag indicating whether the cookie should be sent over a secure connection only (Like HTTPS) (Optional) (bool) HttpOnly A flag indicating whether the cookie should be accessible only through HTTP requests (Optional) (bool) Methods Method Used for Add Adds a cookie to the jar (Cookie || Cookie paramters) Contains Returns (bool) true if the jar contains a cookie with the given name else false takes name as argument (string ) Get Returns the (Cookie) objectwith the given name or null if the cookie does not exist in the jar takes name as argument (string) GetAll Returns all cookies in the cookie jar (IEnumerable<string>) Clear Removes all cookies from the cookie jar NOT RECCOMMEND SetCookieHeader Parses a cookie header string and adds the cookies to the jar (string,Uri) GetCookieHeader Returns a string containing the cookies in the cookie jar as a cookie header string Argument (Uri) returns (string) GetCookiesJson returns the cookies as a json (string) takes a (CookieJar) as a (Optional) argument GetCookieContainer Returns a new (CookieContainer) containing the cookies in the jar takes a (CookieJar) as a (Optional) argument setCookiesFromHeaders Parses the Set-Cookie header in a (Dictionary<string, string>) and adds the cookies to the jar ToCookieCollection Returns a new (CookieCollection) containing the cookies in the jar Response The Response class represents an HTTP response from a web server Attribute Used for content A byte array representing the response content (byte[]) cookies A CookieJar object representing the cookies associated with the response (CookieJar) elapsed A string representing the time elapsed during the request as a example \"12s\" (string) encoding A string representing the encoding of the response content (string) headers A dictionary of strings representing the response headers (Dictionary) is_permanent_redirect A boolean value indicating if the response is a permanent redirect (bool) is_redirect A boolean value indicating if the response is a redirect (bool) links A list of strings representing the links in the response (List ) (NOT IMPLEMENTED YET) ok A boolean value indicating if the request was successful (bool) reason A string representing the reason for the response status code (string) status_code An integer representing the response status code (int) text A string representing the response content as text (string) url A string representing the URL of the response (string) apparentEncoding A string representing the apparent encoding of the response content (NOT IMPLEMENTED YET) it will be same as encoding Methods Method Used for json Returns a JSON string representation of the Response object (string) textInJson Returns a JObject representation of the text response content (JObject) headersInJson Returns a JObject representation of the response headers (JObject) Proxy // Initilizing Proxy proxy = new Proxy(\"ip\",(int)port); // IP ip = new IP(\"theipaddress\"); PORT port = new PORT(443); Proxy proxy1 = new Proxy(ip,port) Attribute Used for ip The ip address in IP object (IP) port The port in PORT object (PORT) username The username for auth (string) password The password for auth (string) httpUrl The http url for the proxy (string) httpsUrl The https url for the proxy (string) authString The auth string in {username}:{password}@ (string) ### Methods Method Used for GetProxyType Returns the proxyTypes based on the port setIpAddress To set the ip and in the urls setPortNumber To set the port and in the urls isOnline Checks whether its online or no by pinging the IP if online it will be true else false (bool)","title":"Reference"},{"location":"Reference/#reference","text":"","title":"Reference"},{"location":"Reference/#session","text":"","title":"Session"},{"location":"Reference/#session-is-the-main-class-to-send-the-http-requests","text":"Attribute Used for Session.headers The headers that the client will be sending in each request you can get the default from Defaultparms.headers (Dictionary<string, string>) Session.CookiesJar The Session cookies that the client will be sending in each request if specified you can initialize it using RequestSharp.cookies.CookieJar (CookieJar) Session.cert The certificate file that the client will be using you can initialize it with the X509Certificate2 class (X509Certificate2) Session.timeout The time in seconds the client will stop retrying after NOTE: not sure if it works if the internet connection is off (int) Session.allowAutoRedirect if true the client will accept redirects DEFAULT : true (bool) Session.proxy The proxy that the client will be using to make requests you can initialize it using RequestSharp.proxy.Proxy takes a ip and a port (Proxy) Session.ClientCertificateOptions Specifies the certificate options that will be using you can initialize it using System.Net.Http.ClientCertificateOption NOTE: you dont need it to use the certificate (ClientCertificateOption) Session.verify_ssl If false it will not verify for ssl DEFAULT : true (bool) Session.AutomaticDecompression Decompressing the data were sent from the server (NOT IMPLEMENTED YET) Session.maxAutomaticRedirections max amount of redirections (NOT IMPLEMENTED YET) Session.maxResponseContentBufferSize The max size could the server (The website) send default -1 for unlimted (NOT IMPLEMENTED YET)","title":"session is the main class to send the http requests"},{"location":"Reference/#methods","text":"Method Used for Get Sends a GET request to a specifec Url arguments Post Sends a POST request to a specifec Url arguments PostList same as post but the data is Dictionary<string, List<>string> ClearCookies To clear the cookies were given to the Session ClearHeaders Will clear the headers were given to the Session BUT will stick with default ones ClearAllHeaders Will clear all the headers even the default ones","title":"Methods"},{"location":"Reference/#cookiejar","text":"","title":"CookieJar"},{"location":"Reference/#the-cookiejar-class-represents-a-collection-of-cookies-dictionary-that-can-be-used-to-manage-the-requests-cookies","text":"","title":"The CookieJar class represents a collection of cookies Dictionary that can be used to manage the requests cookies"},{"location":"Reference/#cookie-object-attributes","text":"","title":"Cookie object attributes"},{"location":"Reference/#attributes","text":"","title":"Attributes"},{"location":"Reference/#cookie-attributes","text":"Attribute Used for Name The name of the cookie (Required) (string) Value The value of the cookie (Required) (string) Domain The domain to which the cookie applies to (EX. google.com) (Optional) (string) Path The path within the domain to which the cookie applies (EX. \"/\") (Optional) (string) Expires The date and time at which the cookie expires (Optional) (string) Secure A flag indicating whether the cookie should be sent over a secure connection only (Like HTTPS) (Optional) (bool) HttpOnly A flag indicating whether the cookie should be accessible only through HTTP requests (Optional) (bool)","title":"Cookie Attributes"},{"location":"Reference/#methods_1","text":"Method Used for Add Adds a cookie to the jar (Cookie || Cookie paramters) Contains Returns (bool) true if the jar contains a cookie with the given name else false takes name as argument (string ) Get Returns the (Cookie) objectwith the given name or null if the cookie does not exist in the jar takes name as argument (string) GetAll Returns all cookies in the cookie jar (IEnumerable<string>) Clear Removes all cookies from the cookie jar NOT RECCOMMEND SetCookieHeader Parses a cookie header string and adds the cookies to the jar (string,Uri) GetCookieHeader Returns a string containing the cookies in the cookie jar as a cookie header string Argument (Uri) returns (string) GetCookiesJson returns the cookies as a json (string) takes a (CookieJar) as a (Optional) argument GetCookieContainer Returns a new (CookieContainer) containing the cookies in the jar takes a (CookieJar) as a (Optional) argument setCookiesFromHeaders Parses the Set-Cookie header in a (Dictionary<string, string>) and adds the cookies to the jar ToCookieCollection Returns a new (CookieCollection) containing the cookies in the jar","title":"Methods"},{"location":"Reference/#response","text":"","title":"Response"},{"location":"Reference/#the-response-class-represents-an-http-response-from-a-web-server","text":"Attribute Used for content A byte array representing the response content (byte[]) cookies A CookieJar object representing the cookies associated with the response (CookieJar) elapsed A string representing the time elapsed during the request as a example \"12s\" (string) encoding A string representing the encoding of the response content (string) headers A dictionary of strings representing the response headers (Dictionary) is_permanent_redirect A boolean value indicating if the response is a permanent redirect (bool) is_redirect A boolean value indicating if the response is a redirect (bool) links A list of strings representing the links in the response (List ) (NOT IMPLEMENTED YET) ok A boolean value indicating if the request was successful (bool) reason A string representing the reason for the response status code (string) status_code An integer representing the response status code (int) text A string representing the response content as text (string) url A string representing the URL of the response (string) apparentEncoding A string representing the apparent encoding of the response content (NOT IMPLEMENTED YET) it will be same as encoding","title":"The Response class represents an HTTP response from a web server"},{"location":"Reference/#methods_2","text":"Method Used for json Returns a JSON string representation of the Response object (string) textInJson Returns a JObject representation of the text response content (JObject) headersInJson Returns a JObject representation of the response headers (JObject)","title":"Methods"},{"location":"Reference/#proxy","text":"// Initilizing Proxy proxy = new Proxy(\"ip\",(int)port); // IP ip = new IP(\"theipaddress\"); PORT port = new PORT(443); Proxy proxy1 = new Proxy(ip,port) Attribute Used for ip The ip address in IP object (IP) port The port in PORT object (PORT) username The username for auth (string) password The password for auth (string) httpUrl The http url for the proxy (string) httpsUrl The https url for the proxy (string) authString The auth string in {username}:{password}@ (string) ### Methods Method Used for GetProxyType Returns the proxyTypes based on the port setIpAddress To set the ip and in the urls setPortNumber To set the port and in the urls isOnline Checks whether its online or no by pinging the IP if online it will be true else false (bool)","title":"Proxy"}]}